

import http, map, io;

struct Foo {
    bar Int;
    baz Int;
}

struct String {
    byte Char[];
}

macro printf!(expr Expr) {

}

macro define!(expr Expr) {
    var table = expr.child[0];
    var key = expr.child[1];
    var value = expr.child[2];
    
    return :(struct :table {
        struct entry {
            key :key;
            value :value; 
        };
        entry entry[];

        export func new() {
        }
    });
}

map::define!(Table,Int,String);
vector::define!(Vector,Int);

func main(arg const Char[]) Int {
    # This function is a function and it is a function

    foreach!(a, arg) {
        io::printf!("%s\n",a);
    }
    for(i := 0, i < arg.length, ++i) {
        io::printf!("%s\n",arg[i]);
    }
    
    var x = "foo";
    var i = string::find_char(x,'c');
    var j = string::find_str(x,"str");

    var res = http::get("http://foo/bar?param=3");

    var v = IntVector::new();
    v::push(1);
    v::push(2);
    
    var t = Table::new(); 
    x = Table::get(t,'foo');

    return 0;
}

export foo;

